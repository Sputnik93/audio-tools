#!/bin/bash

function printhelp () {
	echo -e "\t\tAudio Tagger:"
	echo -e "Utilitaire permettant d'ajouter les tags audio d'un ensemble de fichiers audio dans un même répertoire (typiquement un album audio)"
	echo -e "Usage: $(basename ${0}) [options] <répertoire>"
	echo -e "OPTIONS:"
	echo -e "-d\tdestructive: supprime les fichiers annexes (tels que le fichier descriptif de l'album) à la fin du traitement"
	echo -e "-h\taffiche cette aide et quitte le programme"
	echo -e "-s\tsimulate: n'applique pas les tags aux fichiers, mais affiche une simulation du résultat"
	echo -e "NOTES:"
	echo -e "\t- Le seul encodage audio actuellement supporté est mp3"
	echo -e "\t- A moins que l'option -d soit appelée, les fichiers intermédiaires sont conservés"
	echo -e "\t- Le répertoire en argument doit IMPERATIVEMENT contenir un fichier texte portant l'extension .track respectant les conditions suivantes:"
	echo -e "\tUn bloc album devant contenir (dans n'importe quel ordre) :"
	echo -e "\t\t- une ligne avec 'album' et le titre de l'album // 'Album' est accepté"
	echo -e "\t\t- une ligne avec 'artiste' et le nom de l'artiste // 'artist', 'Artiste' et 'Artist' sont acceptés"
	echo -e "\t\t- une ligne facultative avec 'genre' et le genre de l'album // 'Genre' est accepté"
	echo -e "\t\t- une ligne facultative avec 'année' et l'anéne de l'album (format YYYY) // 'annee', 'Année', 'Annee', 'Year' et 'year' sont acceptés"
	echo -e "\tUne ligne devant contenir 'tracklist' // 'Tracklist', 'trackliste' et 'Trackliste' sont acceptés"
	echo -e "\tUne ligne par titre, devant contenir le numéro de la piste puis le titre de la piste."
	echo -e "\tLes numéros et titres de piste peuvent être éventuellement séparés par les caractères suivants: ':', '-', '/', '\', '_' entourés ou non d'espaces. (idem pour le bloc album)"
	echo -e "\n\tExemple:\n"
	echo -e "\tArtiste : Panda Dub"
	echo -e "\tAlbum:Shapes and Shadows"
	echo -e "\tAnnée: 2015"
	echo -e "\tGenre Dub"
	echo -e "\ttracklist"
	echo -e "\t01-Howl"
	echo -e "\t02 Lost Temple"
	echo -e "\t03-99°C"
	exit $RET
}

RET=0
destr="false"
debug="0"

# contrôle des options
while getopts ":dhs" option ; do
	case $option in
		d ) destr="true" ;;
		h ) RET=0 ; printhelp ;;
		s ) debug="1" ;;
		\? ) echo -e "Option inconnue: $option \n" ; RET=2 ; printhelp ;;
	esac
done
shift $((OPTIND -1))

# contrôles sur le répertoire en argument
if [ $# -lt 1 ] ; then RET=2 ; printhelp ; fi
dir="$(realpath $BASH_ARGV)"
if [ ! -d "$dir" ] ; then RET=2 ; echo -e "\nErreur: $dir n'est pas un répertoire ou n'est pas accessible\n" ; printhelp ; fi
fichier="$(find "$dir" -type f -name "*.track")"
if [ -z "$fichier" ] ; then RET=2 ; echo -e "\nErreur: $dir ne semble pas contenir de fichier .track\n" ; printhelp ; fi
if [ ! -r "$fichier" ] ; then RET=2 ; echo -e "\nErreur: le fichier $fichier n'est pas lisible\n" ; printhelp ; fi
if [ $(file "$fichier" | awk '{print $NF}') != "text" ] ; then RET=2 ; echo -e "\nErreur: le fichier $fichier n'est pas un fichier texte." ; printhelp ; fi

# Test si le fichier contient bien une ligne album et une ligne artiste et une ligne tracklist
if [ $(grep -i -c 'album' "$fichier") -lt 1 ] ; then RET=2 ; echo -e "\nErreur: le fichier $fichier ne contient pas de ligne avec le titre de l'album\n" ; printhelp ; fi
if [ $(grep -iE -c 'artiste?' "$fichier") -lt 1 ] ; then echo -e "\nErreur: le fichier $fichier ne contient pas de ligne avec le nom de l'artiste.\n" ; printhelp ; fi
if [ $(grep -iE -c 'trackliste?' "$fichier") -lt 1 ] ; then RET=2 ; echo -e "\nErreur: le fichier $fichier ne contient pas de ligne 'tracklist'\n" ; printhelp ; fi

# sauvegarde du fichier original s'il n'y a pas de sauvegarde
if [ ! -e copie-"$fichier" ] ; then cp "$fichier" "$fichier-copie" ; fi 

# on commence par supprimer tous les espaces de fin de ligne du fichier
sed -E -i 's/\s+$//' "$fichier"

# reconnaissance des tags d'album 
t_album=$(grep -m1 -i album "$fichier" | sed -E 's/^[Aa]lbum\s?[\\\/_:-]?\s?//')
if [ $debug -eq 1 ] ; then echo "-----$t_album------" ; fi
t_artiste=$(grep -m1 -i -e artiste -e artist "$fichier" | sed -E 's/^[Aa]rtiste?\s?[:\\\/_:-]?\s?//')
if [ $debug -eq 1 ] ; then echo "-----$t_artiste-----" ; fi
t_annee=$(grep -m1 -i -e annee -e année -e year "$fichier" | sed 's/[^0-9]*//')
if [ $debug -eq 1 ] ; then echo "-----$t_annee-----" ; fi
t_genre=$(grep -m1 -i genre "$fichier" | sed -E 's/^[Gg]enre\s?[:\\\/_:-]?\s?//')
if [ $debug -eq 1 ] ; then echo "-----$t_genre-----" ; fi

# reconnaissance de la tracklist 
# liste caractères acceptés dans un titre
auth="a-zA-Z0-9°éèçàâêôûîäëüïöµÀÂÈÉÊË☺♥,?.:()'" # le ☻ et le ♥ c'est cadeau

# isoler la tracklist dans un fichier temporaire séparé (extension tracklist)
debut=$(grep -in tracklist "$fichier" | awk -F":" '{print $1}')
debut=$(($debut+1))
fin=$(wc -l < "$fichier")
sed -n "${debut},${fin}p" "$fichier" > "$fichier.tracklist"
tracklist="$fichier.tracklist"

# vérifier le pattern des lignes de la tracklist
if [ $(grep -E -c "^[0-9]+\s?[_-:\\\/]?\s?[${auth}]+" "$tracklist") -eq 0 ] ; then
	RET=2
	echo -e "\nErreur: la tracklist n'est pas au format attendu. Fin de l'exécution\n"
	rm "$tracklist"
	printhelp
fi

# ajout des 0 devant les chiffres de 1 à 9 seuls
i=1
while read line ; do
	num=$(echo $line | grep -Eo "^[[:digit:]]{1,2}")
        if [ ${#num} -eq 1 ] ; then
                sed -i "${i}s/^/0/" "$tracklist"
        fi
        i=$(($i+1))
done < "$tracklist"


# Récupération des tags individuels
i=0
while read ligne ; do
	i=$(($i+1))
	
	# titre de la track
	t_track=$(echo $ligne | sed -E "s/[0-9]{2}[^${auth}]*([${auth}]+\s?)/\1/")

	# numéro de la track
	t_num=$(echo $ligne | cut -c 1,2)

	if [ $debug -eq 1 ] ; then
		echo "Track $i"
		echo "artiste: -----$t_artiste-----"
		echo "album: -----$t_album-----"
		echo "année: -----${t_annee-2017}-----" # defaut (si non renseignée): 2017
		echo "genre: -----${t_genre-Inconnu}-----" # défaut: Inconnu
		echo "numéro de la track: -----$t_num-----"
		echo "titre de la track: -----$t_track-----"
		echo ""
	elif [ $debug -eq 0 ] ; then
		file=$(ls ${t_num}*)
		id3v2 -a "$t_artiste" -A "$t_album" -t "$t_track" -T "$t_num" -g ${t_genre-Inconnu} -y ${t_annee-2017} "$file" || echo "Erreur sur la track $i"
	fi
done < "$tracklist"

if [ $destr == "true" ] ; then 
	find "$dir" -type f -iregex -o iregex "^.*track.*$" -delete
#	rm "$tracklist"
#	rm "$fichier"
fi
